"""Add in support for scalar markets with a high and low value

Revision ID: 1d7f92b5108f
Revises: 4586c849120f
Create Date: 2021-12-17 17:54:55.847417

"""
from alembic import op
import sqlalchemy as sa
import os


# revision identifiers, used by Alembic.
revision = '1d7f92b5108f'
down_revision = '4586c849120f'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('market', sa.Column('high', sa.Numeric(), nullable=True))
    op.add_column('market', sa.Column('high_string', sa.String(), nullable=True))
    op.add_column('market', sa.Column('low', sa.Numeric(), nullable=True))
    op.add_column('market', sa.Column('low_string', sa.String(), nullable=True))

    # This fails in sqllite which is used for testing
    if os.getenv('TEST') != 'true':
        op.create_check_constraint(
            'binary_vs_scalar_check',
            'market',
            '''(high is not null and high_string is not null and low is not null and low_string is not null and value is null and value_string is null) 
            OR (value_string is not null and value is not null and high is null and high_string is null and low is null and low_string is null)'''

        )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # This fails in sqllite which is used for testing
    if os.getenv('TEST') != 'true':
        op.drop_constraint('binary_vs_scalar_check')

    op.drop_column('market', 'low_string')
    op.drop_column('market', 'low')
    op.drop_column('market', 'high_string')
    op.drop_column('market', 'high')
    # ### end Alembic commands ###
